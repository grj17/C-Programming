From: "Saved by Windows Internet Explorer 8"
Subject: Porting U-Boot To A New Board
Date: Thu, 22 Mar 2012 10:33:26 +0530
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01CD0817.36EB6940"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7601.17574

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01CD0817.36EB6940
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.stlinux.com/book/export/html/127

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML lang=3Den xml:lang=3D"en" =
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><TITLE>Porting U-Boot To A =
New Board</TITLE>
<META content=3D"text/html; charset=3Dutf-8" =
http-equiv=3DContent-Type><LINK=20
rel=3Dstylesheet type=3Dtext/css =
href=3D"http://www.stlinux.com/misc/print.css">
<META name=3DGENERATOR content=3D"MSHTML 8.00.7601.17744"></HEAD>
<BODY>
<DIV class=3Dsection-1>
<DIV id=3Dnode-127 class=3Dsection-2>
<H1 class=3Dbook-heading>Porting U-Boot To A New Board</H1>
<H3>Porting U-Boot to a new board</H3>
<P>The process of porting U-Boot to a new board consists of the =
following steps:=20

<OL>
  <LI>Choose an existing board which is most similar to the new =
board.</LI>
  <LI>Copy the following files and directories using the name of the new =
board.=20
  For instance, change:<BR>
  <TABLE>
    <THEAD>
    <TR>
      <TH>Old name</TH>
      <TH>New name</TH></TR>
    <THEAD>
    <TR>
      <TD><TT>board/&lt;existing-board&gt;</TT></TD>
      <TD><TT>board/&lt;new-board&gt;</TT></TD></TR>
    <TR>
      <TD><TT>include/configs/&lt;existing-board&gt;.h</TT></TD>
      =
<TD><TT>include/configs/&lt;new-boad&gt;.h</TT></TD></TR></THEAD></TABLE>=
</LI>
  <LI>Rename the files in <TT>board/&lt;new-board&gt;</TT> to match the =
name of=20
  the new board.</LI>
  <LI>Modify <TT>board/Makefile</TT> to match the name of the new =
board.</LI>
  <LI>Modify the memory initialization file:=20
  <TT>board/init-&lt;new-board&gt;.S</TT>.</LI>
  <LI>Modify the board initialization file:=20
  <TT>board/&lt;new-board&gt;.c</TT>.</LI>
  <LI>Modify the configuration file =
<TT>include/configs/&lt;new-board&gt;.h</TT>=20
  to match the memory organisation and peripherals of the new =
board.</LI>
  <LI>Modify the value of <TT>TEXT_BASE</TT> in=20
  <TT>board/stb7100mboard/config.mk</TT>. This variable defines the =
SDRAM load=20
  address.</LI></OL>
<H4>Modifying the memory initialization file</H4>
<P>Very early in the boot sequence, the bootstrap calls the function=20
<TT>init_ram</TT> to configure all the critical SoC and board devices. =
This is=20
in order to enable U-Boot to be copied from Flash to SDRAM and start =
executing.=20
This function is normally defined in the file=20
<TT>board/init-&lt;boardname&gt;.S</TT>. </P>
<P>For ST40 targets the structure of this file is typically as =
follows:</P>
<DIV class=3Dgeshifilter><PRE style=3D"FONT-FAMILY: monospace" =
class=3D"console geshifilter-console">#define _SH4REG_ASM_
&nbsp;
&nbsp;
<SPAN style=3D"FONT-STYLE: italic; COLOR: #808080">/* Include some =
register definitions for this device */</SPAN>
#include "asm/stb7100reg.<SPAN style=3D"COLOR: #202020">h</SPAN>"
&nbsp;
<SPAN style=3D"FONT-STYLE: italic; COLOR: #808080">/*=20
Include the common memory initialization code for this SOC.
This file contains the "init_ram" function which uses the
__memory_setup_table defined below to do the appropriate memory setups.
*/</SPAN>
&nbsp;
#include "../../cpu/sh4_2xx/stb7100/init-stb7100common.<SPAN =
style=3D"COLOR: #202020">S</SPAN>"
&nbsp;
.<SPAN style=3D"COLOR: #202020">balign</SPAN> <SPAN>32</SPAN>
&nbsp;
__memory_setup_table:
&nbsp;
  <SPAN style=3D"FONT-STYLE: italic; COLOR: #808080">/* Define memory =
config table */</SPAN>
&nbsp;
  POKE_LONG<SPAN class=3Dbr0>(</SPAN>STB7100_CLOCKGENA_LOCK, 0xc0de<SPAN =
class=3Dbr0>)</SPAN>
  OR_LONG<SPAN class=3Dbr0>(</SPAN>STB7100_CLOCKGENA_PLL0_CFG, =
0x00100000<SPAN class=3Dbr0>)</SPAN>
  UPDATE_LONG<SPAN class=3Dbr0>(</SPAN>STB7100_CLOCKGENA_PLL0_CFG, =
0xfff7ffff, <SPAN>0</SPAN><SPAN class=3Dbr0>)</SPAN>
  UPDATE_LONG<SPAN class=3Dbr0>(</SPAN>STB7100_CLOCKGENA_PLL0_CFG, =
0xfff80000, 0x06 | <SPAN class=3Dbr0>(</SPAN>0x3b &lt;&lt; =
<SPAN>8</SPAN><SPAN class=3Dbr0>)</SPAN> | <SPAN class=3Dbr0>(</SPAN>0x0 =
&lt;&lt; <SPAN>16</SPAN><SPAN class=3Dbr0>)</SPAN><SPAN =
class=3Dbr0>)</SPAN>
  OR_LONG<SPAN class=3Dbr0>(</SPAN>STB7100_CLOCKGENA_PLL0_CFG, =
0x00080000<SPAN class=3Dbr0>)</SPAN>
  WHILE_NE<SPAN class=3Dbr0>(</SPAN>STB7100_CLOCKGENA_PLL0_STATUS, =
0x00000001, 0x00000001<SPAN class=3Dbr0>)</SPAN>
  UPDATE_LONG<SPAN class=3Dbr0>(</SPAN>STB7100_CLOCKGENA_PLL0_CFG, =
0xffefffff, <SPAN>0</SPAN><SPAN class=3Dbr0>)</SPAN>
  POKE_LONG<SPAN class=3Dbr0>(</SPAN>STB7100_CLOCKGENA_LOCK, 0x0<SPAN =
class=3Dbr0>)</SPAN>
&nbsp;
 ...
&nbsp;
  <SPAN style=3D"COLOR: #202020">END_MARKER</SPAN></PRE></DIV>
<P>The initialization of the configuation registers is carried out using =

<TT>__memory_setup_table</TT>. This table defines a sequence of memory=20
operations that are executed in order, with a suitable time delay =
between each=20
operation.</P>
<P>The memory operations currently supported are as follows:</P>
<TABLE style=3D"TEXT-ALIGN: left; WIDTH: 100%" border=3D1 =
cellSpacing=3D2=20
cellPadding=3D2>
  <THEAD>
  <TR>
    <TH style=3D"WIDTH: 366px">Operation</TD>=20
    <TH style=3D"WIDTH: 656px">Function</TD> </TR></TR></THEAD>
  <TBODY>
  <TR>
    <TD style=3D"WIDTH: 366px; FONT-FAMILY: monospace"=20
      class=3Dprogram>POKE_LONG(A, V)</TD>
    <TD style=3D"WIDTH: 656px; FONT-FAMILY: monospace" =
class=3Dprogram>*(*long)(A)=20
      =3D V;</TD></TR>
  <TR>
    <TD style=3D"WIDTH: 366px; FONT-FAMILY: monospace"=20
      class=3Dprogram>POKE_SHORT(A, V)</TD>
    <TD style=3D"WIDTH: 656px; FONT-FAMILY: monospace"=20
      class=3Dprogram>*(*short)(A) =3D V;<BR></TD></TR>
  <TR>
    <TD style=3D"WIDTH: 366px; FONT-FAMILY: monospace"=20
      class=3Dprogram>POKE_CHAR(A, V)</TD>
    <TD style=3D"WIDTH: 656px; FONT-FAMILY: monospace" =
class=3Dprogram>*(*char)(A)=20
      =3D V;<BR></TD></TR>
  <TR>
    <TD style=3D"WIDTH: 366px; FONT-FAMILY: monospace" =
class=3Dprogram>OR_LONG(A,=20
      V)&nbsp;</TD>
    <TD style=3D"WIDTH: 656px; FONT-FAMILY: monospace" =
class=3Dprogram>*(*long)(A)=20
      |=3D V;</TD></TR>
  <TR>
    <TD style=3D"WIDTH: 366px; FONT-FAMILY: monospace"=20
      class=3Dprogram>UPDATE_LONG(A, MASK, V)</TD>
    <TD style=3D"WIDTH: 656px; FONT-FAMILY: monospace" =
class=3Dprogram>*(*long)(A)=20
      =3D (*(*long)(A) &amp; MASK) | V;&nbsp;</TD></TR>
  <TR>
    <TD style=3D"WIDTH: 366px; FONT-FAMILY: =
monospace">POKE_UPDATE_LONG(A1, A2,=20
      MASK, SHIFT, V)</TD>
    <TD style=3D"WIDTH: 656px; FONT-FAMILY: monospace">*(*long)(A1) =3D=20
      ((*(*long)(A2) &amp; MASK) &lt;&lt; SHIFT) | V;</TD></TR>
  <TR>
    <TD style=3D"WIDTH: 366px; FONT-FAMILY: monospace">WHILE_NE(A, MASK, =
V)</TD>
    <TD style=3D"WIDTH: 656px; FONT-FAMILY: monospace">while( =
(*(*long)(A1)=20
      &amp; MASK) !=3D V) <BR>&nbsp; {;}</TD></TR>
  <TR>
    <TD style=3D"WIDTH: 366px; FONT-FAMILY: =
monospace">IF_DEVID(V)&nbsp;</TD>
    <TD style=3D"WIDTH: 656px">If the device ID config register matches=20
      <TT>V</TT> then do the following memory operations until the next =
ELSE or=20
      ENDIF, otherwise execute the operations between the next ELSE and=20
      ENDIF.<BR><SPAN style=3D"FONT-STYLE: italic; FONT-WEIGHT: =
bold">Currently=20
      supported for 710X targets only</SPAN></TD></TR>
  <TR>
    <TD style=3D"WIDTH: 366px; FONT-FAMILY: =
monospace">IF_NOT_DEVID(V)</TD>
    <TD style=3D"WIDTH: 656px">If the device ID config register does NOT =
match=20
      <TT>V</TT> then do the following memory operations until the next =
ELSE or=20
      ENDIF, otherwise execute the operations between the next ELSE and=20
      ENDIF.<BR><SPAN style=3D"FONT-STYLE: italic; FONT-WEIGHT: =
bold">Currently=20
      supported for 710X targets only</SPAN></TD></TR>
  <TR>
    <TD style=3D"WIDTH: 366px; FONT-FAMILY: monospace">ELSE</TD>
    <TD rowSpan=3D2>&nbsp;</TD></TR>
  <TR>
    <TD style=3D"WIDTH: 366px; FONT-FAMILY: monospace">ENDIF</TD></TR>
  <TR>
    <TD style=3D"WIDTH: 366px; FONT-FAMILY: monospace">END_MARKER</TD>
    <TD style=3D"WIDTH: 656px">marks end of =
table</TD></TR></TBODY></TABLE>
<P>Modify this table to match the target SoC target board =
combination.</P>
<P>The ST200 memory setup is very similar to the ST40, expect that it =
has an=20
extra table <TT>_xpu_mmu_setup_table</TT>. This table sets up the MMU =
(and may=20
also require changing).</P>
<H4>Modifying the board&nbsp;initialization file</H4>
<P>After U-Boot has been relocated to SDRAM, the initial bootstrap code =
sets up=20
a stack and calls the C function <TT>start_&lt;cpu&gt;boot </TT>(see=20
<TT>lib_&lt;cpu&gt;/board.c</TT>). This function then calls a number of=20
initialization functions including the function <TT>board_init</TT> =
(which is=20
defined in the file =
<TT>board/&lt;boardname&gt;/&lt;boardname&gt;.c</TT>).=20
<P>The file <TT>board/&lt;boardname&gt;/&lt;boardname&gt;.c</TT> =
contains a=20
number of functions that must be modified to match the target board. =
Typically,=20
these functions set up PIO pins for serial ports, do any EPLD =
programming=20
required, reset devices and provide functions for enabling or disabling =
writes=20
to Flash. </P></DIV></DIV></BODY></HTML>

------=_NextPart_000_0000_01CD0817.36EB6940
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.stlinux.com/misc/print.css

BODY {
	BACKGROUND-COLOR: #fff; MARGIN: 1em
}
TH {
	BORDER-BOTTOM: #ccc 1px solid; TEXT-ALIGN: left; COLOR: #006
}
TR.odd {
	BACKGROUND-COLOR: #ddd
}
TR.even {
	BACKGROUND-COLOR: #fff
}
TD {
	PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; =
PADDING-TOP: 5px
}
#menu {
	VISIBILITY: hidden
}
#main {
	MARGIN: 1em
}

------=_NextPart_000_0000_01CD0817.36EB6940--
